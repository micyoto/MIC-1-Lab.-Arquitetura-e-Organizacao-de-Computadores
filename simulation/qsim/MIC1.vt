// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2024 12:15:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decoder_2x4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_2x4_vlg_sample_tst(
	I0,
	I1,
	sampler_tx
);
input  I0;
input  I1;
output sampler_tx;

reg sample;
time current_time;
always @(I0 or I1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decoder_2x4_vlg_check_tst (
	00,
	01,
	02,
	03,
	sampler_rx
);
input  00;
input  01;
input  02;
input  03;
input sampler_rx;

reg  00_expected;
reg  01_expected;
reg  02_expected;
reg  03_expected;

reg  00_prev;
reg  01_prev;
reg  02_prev;
reg  03_prev;

reg  00_expected_prev;
reg  01_expected_prev;
reg  02_expected_prev;
reg  03_expected_prev;

reg  last_00_exp;
reg  last_01_exp;
reg  last_02_exp;
reg  last_03_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	00_prev = 00;
	01_prev = 01;
	02_prev = 02;
	03_prev = 03;
end

// update expected /o prevs

always @(trigger)
begin
	00_expected_prev = 00_expected;
	01_expected_prev = 01_expected;
	02_expected_prev = 02_expected;
	03_expected_prev = 03_expected;
end



// expected 00
initial
begin
	00_expected = 1'bX;
end 

// expected 01
initial
begin
	01_expected = 1'bX;
end 

// expected 02
initial
begin
	02_expected = 1'bX;
end 

// expected 03
initial
begin
	03_expected = 1'bX;
end 
// generate trigger
always @(00_expected or 00 or 01_expected or 01 or 02_expected or 02 or 03_expected or 03)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 00 = %b | expected 01 = %b | expected 02 = %b | expected 03 = %b | ",00_expected_prev,01_expected_prev,02_expected_prev,03_expected_prev);
	$display("| real 00 = %b | real 01 = %b | real 02 = %b | real 03 = %b | ",00_prev,01_prev,02_prev,03_prev);
`endif
	if (
		( 00_expected_prev !== 1'bx ) && ( 00_prev !== 00_expected_prev )
		&& ((00_expected_prev !== last_00_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 00 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 00_expected_prev);
		$display ("     Real value = %b", 00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_00_exp = 00_expected_prev;
	end
	if (
		( 01_expected_prev !== 1'bx ) && ( 01_prev !== 01_expected_prev )
		&& ((01_expected_prev !== last_01_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 01_expected_prev);
		$display ("     Real value = %b", 01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_01_exp = 01_expected_prev;
	end
	if (
		( 02_expected_prev !== 1'bx ) && ( 02_prev !== 02_expected_prev )
		&& ((02_expected_prev !== last_02_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 02 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 02_expected_prev);
		$display ("     Real value = %b", 02_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_02_exp = 02_expected_prev;
	end
	if (
		( 03_expected_prev !== 1'bx ) && ( 03_prev !== 03_expected_prev )
		&& ((03_expected_prev !== last_03_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 03 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 03_expected_prev);
		$display ("     Real value = %b", 03_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_03_exp = 03_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decoder_2x4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg I0;
reg I1;
// wires                                               
wire 00;
wire 01;
wire 02;
wire 03;

wire sampler;                             

// assign statements (if any)                          
decoder_2x4 i1 (
// port map - connection between master ports and signals/registers   
	.\00 (00),
	.\01 (01),
	.\02 (02),
	.\03 (03),
	.I0(I0),
	.I1(I1)
);

// I0
initial
begin
	I0 = 1'b0;
end 

// I1
initial
begin
	I1 = 1'b0;
end 

decoder_2x4_vlg_sample_tst tb_sample (
	.I0(I0),
	.I1(I1),
	.sampler_tx(sampler)
);

decoder_2x4_vlg_check_tst tb_out(
	.00(00),
	.01(01),
	.02(02),
	.03(03),
	.sampler_rx(sampler)
);
endmodule

